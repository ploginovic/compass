{"ast":null,"code":"var _jsxFileName = \"/Users/pavel/Developer/compass_med/compass/compass_test/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport questions from './questions.json';\nimport Question from './Question';\nimport './css/QuestionStyles.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Quiz() {\n  _s();\n  const [currentQuestion, setCurrentQuestion] = useState(0);\n  const [scores, setScores] = useState({\n    E: 0,\n    I: 0,\n    S: 0,\n    N: 0,\n    T: 0,\n    F: 0,\n    J: 0,\n    P: 0\n  });\n  const [selectedAnswer, setSelectedAnswer] = useState(\"\");\n  const updateScores = (dimension, option) => {\n    // Calculate opposite dimension based on the selected option\n    const updateDimension = option === 'A' ? dimension : {\n      'E': 'I',\n      'I': 'E',\n      'S': 'N',\n      'N': 'S',\n      'T': 'F',\n      'F': 'T',\n      'J': 'P',\n      'P': 'J'\n    }[dimension];\n    setScores(prevScores => ({\n      ...prevScores,\n      [updateDimension]: prevScores[updateDimension] + 1\n    }));\n  };\n  const handleAnswerOptionClick = (dimension, option) => {\n    updateScores(dimension, option);\n    const nextQuestion = currentQuestion + 1;\n    if (nextQuestion < questions.length) {\n      setCurrentQuestion(nextQuestion);\n      setSelectedAnswer(\"\"); // Reset selected answer for the next question\n    } else {\n      // Since setState is asynchronous, use the updated scores directly for the final calculation\n      const finalScores = {\n        ...scores\n      };\n      finalScores[option === 'A' ? dimension : {\n        'E': 'I',\n        'I': 'E',\n        'S': 'N',\n        'N': 'S',\n        'T': 'F',\n        'F': 'T',\n        'J': 'P',\n        'P': 'J'\n      }[dimension]] += 1;\n      const mbtiType = `${finalScores.E >= finalScores.I ? 'E' : 'I'}${finalScores.S >= finalScores.N ? 'S' : 'N'}${finalScores.T >= finalScores.F ? 'T' : 'F'}${finalScores.J >= finalScores.P ? 'J' : 'P'}`;\n      alert(`You have finished the quiz! Your MBTI type is: ${(scores.I, scores.E)}`);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app\",\n    children: questions.length > 0 && /*#__PURE__*/_jsxDEV(Question, {\n      data: questions[currentQuestion],\n      handleAnswerOptionClick: handleAnswerOptionClick,\n      selectedAnswer: selectedAnswer,\n      setSelectedAnswer: setSelectedAnswer\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 5\n  }, this);\n}\n_s(Quiz, \"dlnoO4wQPcM7IFTvTE2xYZ8yN+Q=\");\n_c = Quiz;\nexport default Quiz;\nvar _c;\n$RefreshReg$(_c, \"Quiz\");","map":{"version":3,"names":["React","useState","questions","Question","jsxDEV","_jsxDEV","Quiz","_s","currentQuestion","setCurrentQuestion","scores","setScores","E","I","S","N","T","F","J","P","selectedAnswer","setSelectedAnswer","updateScores","dimension","option","updateDimension","prevScores","handleAnswerOptionClick","nextQuestion","length","finalScores","mbtiType","alert","className","children","data","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/pavel/Developer/compass_med/compass/compass_test/src/App.js"],"sourcesContent":["import React, { useState } from 'react';\nimport questions from './questions.json';\nimport Question from './Question';\nimport './css/QuestionStyles.css';\n\nfunction Quiz() {\n  const [currentQuestion, setCurrentQuestion] = useState(0);\n  const [scores, setScores] = useState({\n    E: 0,\n    I: 0,\n    S: 0,\n    N: 0,\n    T: 0,\n    F: 0,\n    J: 0,\n    P: 0\n  });\n  const [selectedAnswer, setSelectedAnswer] = useState(\"\");\n\n  const updateScores = (dimension, option) => {\n    // Calculate opposite dimension based on the selected option\n    const updateDimension = option === 'A' ? dimension : {\n      'E': 'I', 'I': 'E',\n      'S': 'N', 'N': 'S',\n      'T': 'F', 'F': 'T',\n      'J': 'P', 'P': 'J'\n    }[dimension];\n\n    setScores(prevScores => ({\n      ...prevScores,\n      [updateDimension]: prevScores[updateDimension] + 1\n    }));\n  };\n\n  const handleAnswerOptionClick = (dimension, option) => {\n    updateScores(dimension, option);\n\n    const nextQuestion = currentQuestion + 1;\n    if (nextQuestion < questions.length) {\n      setCurrentQuestion(nextQuestion);\n      setSelectedAnswer(\"\"); // Reset selected answer for the next question\n    } else {\n      // Since setState is asynchronous, use the updated scores directly for the final calculation\n      const finalScores = { ...scores };\n      finalScores[option === 'A' ? dimension : {\n        'E': 'I', 'I': 'E',\n        'S': 'N', 'N': 'S',\n        'T': 'F', 'F': 'T',\n        'J': 'P', 'P': 'J'\n      }[dimension]] += 1;\n\n      const mbtiType = `${finalScores.E >= finalScores.I ? 'E' : 'I'}${finalScores.S >= finalScores.N ? 'S' : 'N'}${finalScores.T >= finalScores.F ? 'T' : 'F'}${finalScores.J >= finalScores.P ? 'J' : 'P'}`;\n      alert(`You have finished the quiz! Your MBTI type is: ${scores.I, scores.E}`);\n    }\n  };\n\n  return (\n    <div className=\"app\">\n      {questions.length > 0 && (\n        <Question\n          data={questions[currentQuestion]}\n          handleAnswerOptionClick={handleAnswerOptionClick}\n          selectedAnswer={selectedAnswer}\n          setSelectedAnswer={setSelectedAnswer}\n        />\n      )}\n    </div>\n  );\n}\n\nexport default Quiz;\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}