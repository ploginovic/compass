{"ast":null,"code":"var _s = $RefreshSig$();\n// QuizLogic.js\nimport { useState } from 'react';\nimport questions from './questions.json'; // Import questions\nimport { updateScores, calculateMBTI } from './scoring';\nconst useQuizLogic = () => {\n  _s();\n  const [currentQuestion, setCurrentQuestion] = useState(0);\n  const [scores, setScores] = useState({\n    E: 0,\n    I: 0,\n    S: 0,\n    N: 0,\n    T: 0,\n    F: 0,\n    J: 0,\n    P: 0\n  });\n  const [selectedAnswers, setSelectedAnswers] = useState([]);\n  const handleAnswerOptionClick = (dimension, option, index) => {\n    setScores(prevScores => updateScores(prevScores, dimension, option));\n    const nextQuestion = index + 1;\n    if (nextQuestion < questions.length) {\n      setCurrentQuestion(nextQuestion);\n    } else {\n      // Calculate the user's MBTI type based on scores\n      const mbtiType = calculateMBTI(scores);\n      alert(`You have finished the quiz! Your MBTI type is: ${mbtiType}`);\n    }\n  };\n  const handleSelectAnswer = (answer, index) => {\n    setSelectedAnswers(prev => {\n      const newAnswers = [...prev];\n      newAnswers[index] = answer;\n      return newAnswers;\n    });\n  };\n  return {\n    currentQuestion,\n    scores,\n    selectedAnswers,\n    handleAnswerOptionClick,\n    handleSelectAnswer\n  };\n};\n_s(useQuizLogic, \"VPf/zTLrDi3EPRBPrVgesnAYuFA=\");\nexport default useQuizLogic;","map":{"version":3,"names":["useState","questions","updateScores","calculateMBTI","useQuizLogic","_s","currentQuestion","setCurrentQuestion","scores","setScores","E","I","S","N","T","F","J","P","selectedAnswers","setSelectedAnswers","handleAnswerOptionClick","dimension","option","index","prevScores","nextQuestion","length","mbtiType","alert","handleSelectAnswer","answer","prev","newAnswers"],"sources":["/Users/pavel/Developer/compass_med/compass/compass_test/src/QuizLogic.js"],"sourcesContent":["// QuizLogic.js\nimport { useState } from 'react';\nimport questions from './questions.json'; // Import questions\nimport { updateScores, calculateMBTI } from './scoring';\n\nconst useQuizLogic = () => {\n  const [currentQuestion, setCurrentQuestion] = useState(0);\n  const [scores, setScores] = useState({\n    E: 0,\n    I: 0,\n    S: 0,\n    N: 0,\n    T: 0,\n    F: 0,\n    J: 0,\n    P: 0\n  });\n  const [selectedAnswers, setSelectedAnswers] = useState([]);\n\n  const handleAnswerOptionClick = (dimension, option, index) => {\n    setScores(prevScores => updateScores(prevScores, dimension, option));\n    const nextQuestion = index + 1;\n    if (nextQuestion < questions.length) {\n      setCurrentQuestion(nextQuestion);\n    } else {\n      // Calculate the user's MBTI type based on scores\n      const mbtiType = calculateMBTI(scores);\n      alert(`You have finished the quiz! Your MBTI type is: ${mbtiType}`);\n    }\n  };\n\n  const handleSelectAnswer = (answer, index) => {\n    setSelectedAnswers(prev => {\n      const newAnswers = [...prev];\n      newAnswers[index] = answer;\n      return newAnswers;\n    });\n  };\n\n  return {\n    currentQuestion,\n    scores,\n    selectedAnswers,\n    handleAnswerOptionClick,\n    handleSelectAnswer\n  };\n}\n\nexport default useQuizLogic;\n\n"],"mappings":";AAAA;AACA,SAASA,QAAQ,QAAQ,OAAO;AAChC,OAAOC,SAAS,MAAM,kBAAkB,CAAC,CAAC;AAC1C,SAASC,YAAY,EAAEC,aAAa,QAAQ,WAAW;AAEvD,MAAMC,YAAY,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACzB,MAAM,CAACC,eAAe,EAAEC,kBAAkB,CAAC,GAAGP,QAAQ,CAAC,CAAC,CAAC;EACzD,MAAM,CAACQ,MAAM,EAAEC,SAAS,CAAC,GAAGT,QAAQ,CAAC;IACnCU,CAAC,EAAE,CAAC;IACJC,CAAC,EAAE,CAAC;IACJC,CAAC,EAAE,CAAC;IACJC,CAAC,EAAE,CAAC;IACJC,CAAC,EAAE,CAAC;IACJC,CAAC,EAAE,CAAC;IACJC,CAAC,EAAE,CAAC;IACJC,CAAC,EAAE;EACL,CAAC,CAAC;EACF,MAAM,CAACC,eAAe,EAAEC,kBAAkB,CAAC,GAAGnB,QAAQ,CAAC,EAAE,CAAC;EAE1D,MAAMoB,uBAAuB,GAAGA,CAACC,SAAS,EAAEC,MAAM,EAAEC,KAAK,KAAK;IAC5Dd,SAAS,CAACe,UAAU,IAAItB,YAAY,CAACsB,UAAU,EAAEH,SAAS,EAAEC,MAAM,CAAC,CAAC;IACpE,MAAMG,YAAY,GAAGF,KAAK,GAAG,CAAC;IAC9B,IAAIE,YAAY,GAAGxB,SAAS,CAACyB,MAAM,EAAE;MACnCnB,kBAAkB,CAACkB,YAAY,CAAC;IAClC,CAAC,MAAM;MACL;MACA,MAAME,QAAQ,GAAGxB,aAAa,CAACK,MAAM,CAAC;MACtCoB,KAAK,CAAE,kDAAiDD,QAAS,EAAC,CAAC;IACrE;EACF,CAAC;EAED,MAAME,kBAAkB,GAAGA,CAACC,MAAM,EAAEP,KAAK,KAAK;IAC5CJ,kBAAkB,CAACY,IAAI,IAAI;MACzB,MAAMC,UAAU,GAAG,CAAC,GAAGD,IAAI,CAAC;MAC5BC,UAAU,CAACT,KAAK,CAAC,GAAGO,MAAM;MAC1B,OAAOE,UAAU;IACnB,CAAC,CAAC;EACJ,CAAC;EAED,OAAO;IACL1B,eAAe;IACfE,MAAM;IACNU,eAAe;IACfE,uBAAuB;IACvBS;EACF,CAAC;AACH,CAAC;AAAAxB,EAAA,CAzCKD,YAAY;AA2ClB,eAAeA,YAAY","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}