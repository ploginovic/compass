{"ast":null,"code":"var _jsxFileName = \"/Users/pavel/Developer/compass_med/compass/compass_test/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport questions from './questions.json';\nimport Question from './Question';\nimport Header from './Header'; // Import the Header component\nimport './css/QuestionStyles.css';\nimport './App.css'; // Import the App.css at the top of your file\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Quiz() {\n  _s();\n  const [currentQuestion, setCurrentQuestion] = useState(0);\n  const [scores, setScores] = useState({\n    E: 0,\n    I: 0,\n    S: 0,\n    N: 0,\n    T: 0,\n    F: 0,\n    J: 0,\n    P: 0\n  });\n  const [selectedAnswer, setSelectedAnswer] = useState(\"\");\n  const handleAnswerOptionClick = (dimension, option) => {\n    const oppositeDimension = dimension === 'E' ? 'I' : dimension === 'I' ? 'E' : dimension === 'S' ? 'N' : dimension === 'N' ? 'S' : dimension === 'T' ? 'F' : dimension === 'F' ? 'T' : dimension === 'J' ? 'P' : 'J';\n    setScores(prevScores => ({\n      ...prevScores,\n      [dimension]: option === 'A' ? prevScores[dimension] + 1 : prevScores[dimension],\n      [oppositeDimension]: option === 'B' ? prevScores[oppositeDimension] + 1 : prevScores[oppositeDimension]\n    }));\n    const nextQuestion = currentQuestion + 1;\n    if (nextQuestion < questions.length) {\n      setCurrentQuestion(nextQuestion);\n      setSelectedAnswer(\"\");\n    } else {\n      const mbtiType = `${scores.E >= scores.I ? 'E' : 'I'}${scores.S >= scores.N ? 'S' : 'N'}${scores.T >= scores.F ? 'T' : 'F'}${scores.J >= scores.P ? 'J' : 'P'}`;\n      alert(`You have finished the quiz! Your MBTI type is: ${mbtiType}`);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app\",\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this), \" \", questions.length > 0 && /*#__PURE__*/_jsxDEV(Question, {\n      data: questions[currentQuestion],\n      handleAnswerOptionClick: handleAnswerOptionClick,\n      selectedAnswer: selectedAnswer,\n      setSelectedAnswer: setSelectedAnswer\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 5\n  }, this);\n}\n_s(Quiz, \"dlnoO4wQPcM7IFTvTE2xYZ8yN+Q=\");\n_c = Quiz;\nexport default Quiz;\nvar _c;\n$RefreshReg$(_c, \"Quiz\");","map":{"version":3,"names":["React","useState","questions","Question","Header","jsxDEV","_jsxDEV","Quiz","_s","currentQuestion","setCurrentQuestion","scores","setScores","E","I","S","N","T","F","J","P","selectedAnswer","setSelectedAnswer","handleAnswerOptionClick","dimension","option","oppositeDimension","prevScores","nextQuestion","length","mbtiType","alert","className","children","fileName","_jsxFileName","lineNumber","columnNumber","data","_c","$RefreshReg$"],"sources":["/Users/pavel/Developer/compass_med/compass/compass_test/src/App.js"],"sourcesContent":["import React, { useState } from 'react';\nimport questions from './questions.json';\nimport Question from './Question';\nimport Header from './Header'; // Import the Header component\nimport './css/QuestionStyles.css';\nimport './App.css'; // Import the App.css at the top of your file\n\n\nfunction Quiz() {\n  const [currentQuestion, setCurrentQuestion] = useState(0);\n  const [scores, setScores] = useState({\n    E: 0,\n    I: 0,\n    S: 0,\n    N: 0,\n    T: 0,\n    F: 0,\n    J: 0,\n    P: 0\n  });\n  const [selectedAnswer, setSelectedAnswer] = useState(\"\");\n\n  const handleAnswerOptionClick = (dimension, option) => {\n    const oppositeDimension = dimension === 'E' ? 'I' : \n                              dimension === 'I' ? 'E' :\n                              dimension === 'S' ? 'N' :\n                              dimension === 'N' ? 'S' :\n                              dimension === 'T' ? 'F' :\n                              dimension === 'F' ? 'T' :\n                              dimension === 'J' ? 'P' : 'J';\n\n    setScores(prevScores => ({\n      ...prevScores,\n      [dimension]: option === 'A' ? prevScores[dimension] + 1 : prevScores[dimension],\n      [oppositeDimension]: option === 'B' ? prevScores[oppositeDimension] + 1 : prevScores[oppositeDimension]\n    }));\n\n    const nextQuestion = currentQuestion + 1;\n    if (nextQuestion < questions.length) {\n      setCurrentQuestion(nextQuestion);\n      setSelectedAnswer(\"\");\n    } else {\n      const mbtiType = `${scores.E >= scores.I ? 'E' : 'I'}${scores.S >= scores.N ? 'S' : 'N'}${scores.T >= scores.F ? 'T' : 'F'}${scores.J >= scores.P ? 'J' : 'P'}`;\n      alert(`You have finished the quiz! Your MBTI type is: ${mbtiType}`);\n    }\n  };\n\n  return (\n    <div className=\"app\">\n      <Header /> {/* Include the Header component */}\n      {questions.length > 0 && (\n        <Question\n          data={questions[currentQuestion]}\n          handleAnswerOptionClick={handleAnswerOptionClick}\n          selectedAnswer={selectedAnswer}\n          setSelectedAnswer={setSelectedAnswer}\n        />\n      )}\n    </div>\n  );\n}\n\nexport default Quiz;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}