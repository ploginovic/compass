{"ast":null,"code":"var _jsxFileName = \"/Users/thomasowen/Desktop/University/MSc Health Data Science/Making a difference/assignment_2_2024/compass/compass_test/src/App.js\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport Header from './Header';\nimport './Header.css'; // Style for Header\nimport './css/QuestionStyles.css'; // Style for Question and Quiz\nimport Question from './Question';\nimport { updateScores, calculateMBTI } from './scoring';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Quiz() {\n  _s();\n  const [currentQuestion, setCurrentQuestion] = useState(0);\n  const [scores, setScores] = useState({\n    E: 0,\n    I: 0,\n    S: 0,\n    N: 0,\n    T: 0,\n    F: 0,\n    J: 0,\n    P: 0\n  });\n  const [selectedAnswers, setSelectedAnswers] = useState([]);\n  const handleAnswerOptionClick = (dimension, option, index) => {\n    setScores(prevScores => updateScores(prevScores, dimension, option));\n    const nextQuestion = index + 1;\n    if (nextQuestion < questions.length) {\n      setCurrentQuestion(nextQuestion);\n    } else {\n      // Calculate the user's MBTI type based on scores\n      const mbtiType = calculateMBTI(scores);\n      alert(`You have finished the quiz! Your MBTI type is: ${mbtiType}`);\n    }\n  };\n  const handleSelectAnswer = (answer, index) => {\n    setSelectedAnswers(prev => {\n      const newAnswers = [...prev];\n      newAnswers[index] = answer;\n      return newAnswers;\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app\",\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"quiz-container\",\n      children: questions.map((question, index) => /*#__PURE__*/_jsxDEV(Question, {\n        data: question,\n        isCurrentQuestion: currentQuestion === index,\n        handleAnswerOptionClick: (dimension, option) => handleAnswerOptionClick(dimension, option, index),\n        selectedAnswer: selectedAnswers[index],\n        setSelectedAnswer: answer => handleSelectAnswer(answer, index),\n        isLastQuestion: index === questions.length - 1\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 5\n  }, this);\n}\n_s(Quiz, \"VPf/zTLrDi3EPRBPrVgesnAYuFA=\");\n_c = Quiz;\nexport default Quiz;\nvar _c;\n$RefreshReg$(_c, \"Quiz\");","map":{"version":3,"names":["React","Header","Question","updateScores","calculateMBTI","jsxDEV","_jsxDEV","Quiz","_s","currentQuestion","setCurrentQuestion","useState","scores","setScores","E","I","S","N","T","F","J","P","selectedAnswers","setSelectedAnswers","handleAnswerOptionClick","dimension","option","index","prevScores","nextQuestion","questions","length","mbtiType","alert","handleSelectAnswer","answer","prev","newAnswers","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","question","data","isCurrentQuestion","selectedAnswer","setSelectedAnswer","isLastQuestion","_c","$RefreshReg$"],"sources":["/Users/thomasowen/Desktop/University/MSc Health Data Science/Making a difference/assignment_2_2024/compass/compass_test/src/App.js"],"sourcesContent":["import React from 'react';\nimport Header from './Header';\nimport './Header.css';          // Style for Header\nimport './css/QuestionStyles.css'; // Style for Question and Quiz\nimport Question from './Question';\nimport { updateScores, calculateMBTI } from './scoring';\n\nfunction Quiz() {\n  const [currentQuestion, setCurrentQuestion] = useState(0);\n  const [scores, setScores] = useState({\n    E: 0,\n    I: 0,\n    S: 0,\n    N: 0,\n    T: 0,\n    F: 0,\n    J: 0,\n    P: 0\n  });\n  const [selectedAnswers, setSelectedAnswers] = useState([]);\n\n  const handleAnswerOptionClick = (dimension, option, index) => {\n    setScores(prevScores => updateScores(prevScores, dimension, option));\n    const nextQuestion = index + 1;\n    if (nextQuestion < questions.length) {\n      setCurrentQuestion(nextQuestion);\n    } else {\n      // Calculate the user's MBTI type based on scores\n      const mbtiType = calculateMBTI(scores);\n      alert(`You have finished the quiz! Your MBTI type is: ${mbtiType}`);\n    }\n  };\n\n  const handleSelectAnswer = (answer, index) => {\n    setSelectedAnswers(prev => {\n      const newAnswers = [...prev];\n      newAnswers[index] = answer;\n      return newAnswers;\n    });\n  };\n\n  return (\n    <div className=\"app\">\n      <Header />\n      <div className=\"quiz-container\">\n        {questions.map((question, index) => (\n          <Question\n            key={index}\n            data={question}\n            isCurrentQuestion={currentQuestion === index}\n            handleAnswerOptionClick={(dimension, option) => handleAnswerOptionClick(dimension, option, index)}\n            selectedAnswer={selectedAnswers[index]}\n            setSelectedAnswer={(answer) => handleSelectAnswer(answer, index)}\n            isLastQuestion={index === questions.length - 1}\n          />\n        ))}\n      </div>\n    </div>\n  );\n}\n\nexport default Quiz;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}