{"ast":null,"code":"var _jsxFileName = \"/Users/pavel/Developer/compass_med/compass/compass_test/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport questions from './questions.json';\nimport Question from './Question';\nimport Header from './Header';\nimport './css/QuestionStyles.css';\n// import './css/App.css';\nimport { updateScores, calculateMBTI } from './scoring';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Quiz() {\n  _s();\n  const [currentQuestion, setCurrentQuestion] = useState(0);\n  const [scores, setScores] = useState({\n    E: 0,\n    I: 0,\n    S: 0,\n    N: 0,\n    T: 0,\n    F: 0,\n    J: 0,\n    P: 0\n  });\n  const [selectedAnswer, setSelectedAnswer] = useState(\"\");\n  const handleAnswerOptionClick = (dimension, option) => {\n    setScores(prevScores => updateScores(prevScores, dimension, option));\n    const nextQuestion = currentQuestion + 1;\n    if (nextQuestion < questions.length) {\n      setCurrentQuestion(nextQuestion);\n      setSelectedAnswer(\"\"); // Reset selected answer for the next question\n    } else {\n      // Calculate the user's MBTI type based on scores\n      const mbtiType = calculateMBTI(scores);\n      alert(`You have finished the quiz! Your MBTI type is: ${scores.E}`);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app\",\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this), questions.length > 0 && /*#__PURE__*/_jsxDEV(Question, {\n      data: questions[currentQuestion],\n      handleAnswerOptionClick: handleAnswerOptionClick,\n      selectedAnswer: selectedAnswer,\n      setSelectedAnswer: setSelectedAnswer\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 5\n  }, this);\n}\n_s(Quiz, \"dlnoO4wQPcM7IFTvTE2xYZ8yN+Q=\");\n_c = Quiz;\nexport default Quiz;\nvar _c;\n$RefreshReg$(_c, \"Quiz\");","map":{"version":3,"names":["React","useState","questions","Question","Header","updateScores","calculateMBTI","jsxDEV","_jsxDEV","Quiz","_s","currentQuestion","setCurrentQuestion","scores","setScores","E","I","S","N","T","F","J","P","selectedAnswer","setSelectedAnswer","handleAnswerOptionClick","dimension","option","prevScores","nextQuestion","length","mbtiType","alert","className","children","fileName","_jsxFileName","lineNumber","columnNumber","data","_c","$RefreshReg$"],"sources":["/Users/pavel/Developer/compass_med/compass/compass_test/src/App.js"],"sourcesContent":["import React, { useState } from 'react';\nimport questions from './questions.json';\nimport Question from './Question';\nimport Header from './Header';\nimport './css/QuestionStyles.css';\n// import './css/App.css';\nimport { updateScores, calculateMBTI } from './scoring';\n\nfunction Quiz() {\n  const [currentQuestion, setCurrentQuestion] = useState(0);\n  const [scores, setScores] = useState({\n    E: 0,\n    I: 0,\n    S: 0,\n    N: 0,\n    T: 0,\n    F: 0,\n    J: 0,\n    P: 0\n  });\n  const [selectedAnswer, setSelectedAnswer] = useState(\"\");\n\n  const handleAnswerOptionClick = (dimension, option) => {\n    setScores(prevScores => updateScores(prevScores, dimension, option));\n\n    const nextQuestion = currentQuestion + 1;\n    if (nextQuestion < questions.length) {\n      setCurrentQuestion(nextQuestion);\n      setSelectedAnswer(\"\"); // Reset selected answer for the next question\n    } else {\n      // Calculate the user's MBTI type based on scores\n      const mbtiType = calculateMBTI(scores);\n      alert(`You have finished the quiz! Your MBTI type is: ${scores.E}`);\n    }\n  };\n\n  return (\n    <div className=\"app\">\n      <Header />\n      {questions.length > 0 && (\n        <Question\n          data={questions[currentQuestion]}\n          handleAnswerOptionClick={handleAnswerOptionClick}\n          selectedAnswer={selectedAnswer}\n          setSelectedAnswer={setSelectedAnswer}\n        />\n      )}\n    </div>\n  );\n}\n\nexport default Quiz;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,SAAS,MAAM,kBAAkB;AACxC,OAAOC,QAAQ,MAAM,YAAY;AACjC,OAAOC,MAAM,MAAM,UAAU;AAC7B,OAAO,0BAA0B;AACjC;AACA,SAASC,YAAY,EAAEC,aAAa,QAAQ,WAAW;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExD,SAASC,IAAIA,CAAA,EAAG;EAAAC,EAAA;EACd,MAAM,CAACC,eAAe,EAAEC,kBAAkB,CAAC,GAAGX,QAAQ,CAAC,CAAC,CAAC;EACzD,MAAM,CAACY,MAAM,EAAEC,SAAS,CAAC,GAAGb,QAAQ,CAAC;IACnCc,CAAC,EAAE,CAAC;IACJC,CAAC,EAAE,CAAC;IACJC,CAAC,EAAE,CAAC;IACJC,CAAC,EAAE,CAAC;IACJC,CAAC,EAAE,CAAC;IACJC,CAAC,EAAE,CAAC;IACJC,CAAC,EAAE,CAAC;IACJC,CAAC,EAAE;EACL,CAAC,CAAC;EACF,MAAM,CAACC,cAAc,EAAEC,iBAAiB,CAAC,GAAGvB,QAAQ,CAAC,EAAE,CAAC;EAExD,MAAMwB,uBAAuB,GAAGA,CAACC,SAAS,EAAEC,MAAM,KAAK;IACrDb,SAAS,CAACc,UAAU,IAAIvB,YAAY,CAACuB,UAAU,EAAEF,SAAS,EAAEC,MAAM,CAAC,CAAC;IAEpE,MAAME,YAAY,GAAGlB,eAAe,GAAG,CAAC;IACxC,IAAIkB,YAAY,GAAG3B,SAAS,CAAC4B,MAAM,EAAE;MACnClB,kBAAkB,CAACiB,YAAY,CAAC;MAChCL,iBAAiB,CAAC,EAAE,CAAC,CAAC,CAAC;IACzB,CAAC,MAAM;MACL;MACA,MAAMO,QAAQ,GAAGzB,aAAa,CAACO,MAAM,CAAC;MACtCmB,KAAK,CAAE,kDAAiDnB,MAAM,CAACE,CAAE,EAAC,CAAC;IACrE;EACF,CAAC;EAED,oBACEP,OAAA;IAAKyB,SAAS,EAAC,KAAK;IAAAC,QAAA,gBAClB1B,OAAA,CAACJ,MAAM;MAAA+B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,EACTpC,SAAS,CAAC4B,MAAM,GAAG,CAAC,iBACnBtB,OAAA,CAACL,QAAQ;MACPoC,IAAI,EAAErC,SAAS,CAACS,eAAe,CAAE;MACjCc,uBAAuB,EAAEA,uBAAwB;MACjDF,cAAc,EAAEA,cAAe;MAC/BC,iBAAiB,EAAEA;IAAkB;MAAAW,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACtC,CACF;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV;AAAC5B,EAAA,CAzCQD,IAAI;AAAA+B,EAAA,GAAJ/B,IAAI;AA2Cb,eAAeA,IAAI;AAAC,IAAA+B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}