{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport questions from './questions.json'; // Import questions\nimport { updateScores, calculateMBTI } from './scoring';\nconst useQuizLogic = () => {\n  _s();\n  const [currentQuestion, setCurrentQuestion] = useState(() => {\n    const savedCurrentQuestion = localStorage.getItem('currentQuestion');\n    return savedCurrentQuestion !== null ? JSON.parse(savedCurrentQuestion) : 0;\n  });\n  const [scores, setScores] = useState(() => {\n    const savedScores = localStorage.getItem('scores');\n    return savedScores !== null ? JSON.parse(savedScores) : {\n      E: 0,\n      I: 0,\n      S: 0,\n      N: 0,\n      T: 0,\n      F: 0,\n      J: 0,\n      P: 0\n    };\n  });\n  const [selectedAnswers, setSelectedAnswers] = useState(() => {\n    const savedSelectedAnswers = localStorage.getItem('selectedAnswers');\n    return savedSelectedAnswers !== null ? JSON.parse(savedSelectedAnswers) : [];\n  });\n  useEffect(() => {\n    localStorage.setItem('currentQuestion', JSON.stringify(currentQuestion));\n  }, [currentQuestion]);\n  useEffect(() => {\n    localStorage.setItem('scores', JSON.stringify(scores));\n  }, [scores]);\n  useEffect(() => {\n    localStorage.setItem('selectedAnswers', JSON.stringify(selectedAnswers));\n  }, [selectedAnswers]);\n  const handleAnswerOptionClick = (dimension, option, index) => {\n    setScores(prevScores => updateScores(prevScores, dimension, option));\n    const nextQuestion = index + 1;\n    if (nextQuestion < questions.length) {\n      setCurrentQuestion(nextQuestion);\n    } else {\n      // Calculate the user's MBTI type based on scores\n      const mbtiType = calculateMBTI(scores);\n      alert(`You have finished the quiz! Your MBTI type is: ${mbtiType}`);\n    }\n  };\n  const handleSelectAnswer = (answer, index) => {\n    setSelectedAnswers(prev => {\n      const newAnswers = [...prev];\n      newAnswers[index] = answer;\n      return newAnswers;\n    });\n  };\n  return {\n    currentQuestion,\n    scores,\n    selectedAnswers,\n    handleAnswerOptionClick,\n    handleSelectAnswer\n  };\n};\n_s(useQuizLogic, \"/yN4tGwMcJO8+/C5aXACoHqM5Pk=\");\nexport default useQuizLogic;","map":{"version":3,"names":["useState","useEffect","questions","updateScores","calculateMBTI","useQuizLogic","_s","currentQuestion","setCurrentQuestion","savedCurrentQuestion","localStorage","getItem","JSON","parse","scores","setScores","savedScores","E","I","S","N","T","F","J","P","selectedAnswers","setSelectedAnswers","savedSelectedAnswers","setItem","stringify","handleAnswerOptionClick","dimension","option","index","prevScores","nextQuestion","length","mbtiType","alert","handleSelectAnswer","answer","prev","newAnswers"],"sources":["/Users/pavel/Developer/compass_med/compass/compass_test/src/QuizLogic.js"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport questions from './questions.json'; // Import questions\nimport { updateScores, calculateMBTI } from './scoring';\n\nconst useQuizLogic = () => {\n  const [currentQuestion, setCurrentQuestion] = useState(() => {\n    const savedCurrentQuestion = localStorage.getItem('currentQuestion');\n    return savedCurrentQuestion !== null ? JSON.parse(savedCurrentQuestion) : 0;\n  });\n  const [scores, setScores] = useState(() => {\n    const savedScores = localStorage.getItem('scores');\n    return savedScores !== null ? JSON.parse(savedScores) : {\n      E: 0,\n      I: 0,\n      S: 0,\n      N: 0,\n      T: 0,\n      F: 0,\n      J: 0,\n      P: 0\n    };\n  });\n  const [selectedAnswers, setSelectedAnswers] = useState(() => {\n    const savedSelectedAnswers = localStorage.getItem('selectedAnswers');\n    return savedSelectedAnswers !== null ? JSON.parse(savedSelectedAnswers) : [];\n  });\n\n  useEffect(() => {\n    localStorage.setItem('currentQuestion', JSON.stringify(currentQuestion));\n  }, [currentQuestion]);\n\n  useEffect(() => {\n    localStorage.setItem('scores', JSON.stringify(scores));\n  }, [scores]);\n\n  useEffect(() => {\n    localStorage.setItem('selectedAnswers', JSON.stringify(selectedAnswers));\n  }, [selectedAnswers]);\n\n  const handleAnswerOptionClick = (dimension, option, index) => {\n    setScores(prevScores => updateScores(prevScores, dimension, option));\n    const nextQuestion = index + 1;\n    if (nextQuestion < questions.length) {\n      setCurrentQuestion(nextQuestion);\n    } else {\n      // Calculate the user's MBTI type based on scores\n      const mbtiType = calculateMBTI(scores);\n      alert(`You have finished the quiz! Your MBTI type is: ${mbtiType}`);\n    }\n  };\n\n  const handleSelectAnswer = (answer, index) => {\n    setSelectedAnswers(prev => {\n      const newAnswers = [...prev];\n      newAnswers[index] = answer;\n      return newAnswers;\n    });\n  };\n\n  return {\n    currentQuestion,\n    scores,\n    selectedAnswers,\n    handleAnswerOptionClick,\n    handleSelectAnswer\n  };\n}\n\nexport default useQuizLogic;\n\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}