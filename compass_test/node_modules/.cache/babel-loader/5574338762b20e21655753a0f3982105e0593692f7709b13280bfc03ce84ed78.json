{"ast":null,"code":"var _jsxFileName = \"/Users/pavel/Developer/compass_med/compass/compass_test/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport questions from './questions.json';\nimport Question from './Question';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Quiz() {\n  _s();\n  const [currentQuestion, setCurrentQuestion] = useState(0);\n  const [score, setScore] = useState(0);\n  const [selectedAnswer, setSelectedAnswer] = useState(\"\");\n  const handleAnswerOptionClick = isCorrect => {\n    if (isCorrect) {\n      setScore(prevScore => prevScore + 1);\n    }\n    const nextQuestion = currentQuestion + 1;\n    if (nextQuestion < questions.length) {\n      setCurrentQuestion(nextQuestion);\n      setSelectedAnswer(\"\"); // Reset selected answer for the next question\n    } else {\n      alert(`You have finished the quiz! Your score is: ${score + (isCorrect ? 1 : 0)}`);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: question\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: data.answers.map((answer, index) => /*#__PURE__*/_jsxDEV(\"label\", {\n        className: \"radio-label\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          className: \"radio-input\",\n          type: \"radio\",\n          name: \"answer\",\n          value: answer.text,\n          checked: selectedAnswer === answer.text,\n          onChange: () => {\n            setSelectedAnswer(answer.text);\n            handleAnswerOptionClick(answer.isCorrect);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 30,\n          columnNumber: 13\n        }, this), answer.text]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 5\n  }, this);\n}\n_s(Quiz, \"u47WqVInYEXztmx8kW6NU7U+otc=\");\n_c = Quiz;\nexport default Quiz;\nvar _c;\n$RefreshReg$(_c, \"Quiz\");","map":{"version":3,"names":["React","useState","questions","Question","jsxDEV","_jsxDEV","Quiz","_s","currentQuestion","setCurrentQuestion","score","setScore","selectedAnswer","setSelectedAnswer","handleAnswerOptionClick","isCorrect","prevScore","nextQuestion","length","alert","children","question","fileName","_jsxFileName","lineNumber","columnNumber","data","answers","map","answer","index","className","type","name","value","text","checked","onChange","_c","$RefreshReg$"],"sources":["/Users/pavel/Developer/compass_med/compass/compass_test/src/App.js"],"sourcesContent":["import React, { useState } from 'react';\nimport questions from './questions.json';\nimport Question from './Question';\n\nfunction Quiz() {\n  const [currentQuestion, setCurrentQuestion] = useState(0);\n  const [score, setScore] = useState(0);\n  const [selectedAnswer, setSelectedAnswer] = useState(\"\");\n\n  const handleAnswerOptionClick = (isCorrect) => {\n    if (isCorrect) {\n      setScore(prevScore => prevScore + 1);\n    }\n\n    const nextQuestion = currentQuestion + 1;\n    if (nextQuestion < questions.length) {\n      setCurrentQuestion(nextQuestion);\n      setSelectedAnswer(\"\"); // Reset selected answer for the next question\n    } else {\n      alert(`You have finished the quiz! Your score is: ${score + (isCorrect ? 1 : 0)}`);\n    }\n  };\n\n  return (\n    <div>\n      <h1>{question}</h1>\n      <div>\n        {data.answers.map((answer, index) => (\n          <label key={index} className=\"radio-label\">\n            <input\n              className=\"radio-input\"\n              type=\"radio\"\n              name=\"answer\"\n              value={answer.text}\n              checked={selectedAnswer === answer.text}\n              onChange={() => {\n                setSelectedAnswer(answer.text);\n                handleAnswerOptionClick(answer.isCorrect);\n              }}\n            />\n            {answer.text}\n          </label>\n        ))}\n      </div>\n    </div>\n  );\n}\n\nexport default Quiz;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,SAAS,MAAM,kBAAkB;AACxC,OAAOC,QAAQ,MAAM,YAAY;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAElC,SAASC,IAAIA,CAAA,EAAG;EAAAC,EAAA;EACd,MAAM,CAACC,eAAe,EAAEC,kBAAkB,CAAC,GAAGR,QAAQ,CAAC,CAAC,CAAC;EACzD,MAAM,CAACS,KAAK,EAAEC,QAAQ,CAAC,GAAGV,QAAQ,CAAC,CAAC,CAAC;EACrC,MAAM,CAACW,cAAc,EAAEC,iBAAiB,CAAC,GAAGZ,QAAQ,CAAC,EAAE,CAAC;EAExD,MAAMa,uBAAuB,GAAIC,SAAS,IAAK;IAC7C,IAAIA,SAAS,EAAE;MACbJ,QAAQ,CAACK,SAAS,IAAIA,SAAS,GAAG,CAAC,CAAC;IACtC;IAEA,MAAMC,YAAY,GAAGT,eAAe,GAAG,CAAC;IACxC,IAAIS,YAAY,GAAGf,SAAS,CAACgB,MAAM,EAAE;MACnCT,kBAAkB,CAACQ,YAAY,CAAC;MAChCJ,iBAAiB,CAAC,EAAE,CAAC,CAAC,CAAC;IACzB,CAAC,MAAM;MACLM,KAAK,CAAE,8CAA6CT,KAAK,IAAIK,SAAS,GAAG,CAAC,GAAG,CAAC,CAAE,EAAC,CAAC;IACpF;EACF,CAAC;EAED,oBACEV,OAAA;IAAAe,QAAA,gBACEf,OAAA;MAAAe,QAAA,EAAKC;IAAQ;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,eACnBpB,OAAA;MAAAe,QAAA,EACGM,IAAI,CAACC,OAAO,CAACC,GAAG,CAAC,CAACC,MAAM,EAAEC,KAAK,kBAC9BzB,OAAA;QAAmB0B,SAAS,EAAC,aAAa;QAAAX,QAAA,gBACxCf,OAAA;UACE0B,SAAS,EAAC,aAAa;UACvBC,IAAI,EAAC,OAAO;UACZC,IAAI,EAAC,QAAQ;UACbC,KAAK,EAAEL,MAAM,CAACM,IAAK;UACnBC,OAAO,EAAExB,cAAc,KAAKiB,MAAM,CAACM,IAAK;UACxCE,QAAQ,EAAEA,CAAA,KAAM;YACdxB,iBAAiB,CAACgB,MAAM,CAACM,IAAI,CAAC;YAC9BrB,uBAAuB,CAACe,MAAM,CAACd,SAAS,CAAC;UAC3C;QAAE;UAAAO,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACH,CAAC,EACDI,MAAM,CAACM,IAAI;MAAA,GAZFL,KAAK;QAAAR,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAaV,CACR;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV;AAAClB,EAAA,CA1CQD,IAAI;AAAAgC,EAAA,GAAJhC,IAAI;AA4Cb,eAAeA,IAAI;AAAC,IAAAgC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}